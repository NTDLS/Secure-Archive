#ifndef _Helper_Cpp
#define _Helper_Cpp
//////////////////////////////////////////////////////////////////////////////////////////////////////////////

#include <Windows.H>

//////////////////////////////////////////////////////////////////////////////////////////////////////////////

void ClearBit(unsigned long *ulBitMask, DWORD iBit)
{
	DWORD iPow = 0;
	DWORD iSet = 1;

	while(iPow < iBit)
	{
		iSet *= 2;
		iPow++;
	}

	*ulBitMask |= ~iSet;
}

//////////////////////////////////////////////////////////////////////////////////////////////////////////////

void SetBit(DWORD *ulBitMask, DWORD iBit)
{
	DWORD iPow = 0;
	DWORD iSet = 1;

	while(iPow < iBit)
	{
		iSet *= 2;
		iPow++;
	}

	*ulBitMask |= iSet;
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

char *ULongToBinary(DWORD iBitMask, char *sBinary, int iOutSz)
{
	int i;

	memset(sBinary, 0, iOutSz);

	for (i = 31; i >= 0; i--)
	{
		sBinary[i] = (unsigned int)((iBitMask & 1) + '0');
		iBitMask = iBitMask >> 1;
	}

	return sBinary;
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

bool IsBitSet(unsigned long ulBitMask, DWORD iBit)
{
	DWORD iPow = 0;
	DWORD iSet = 1;

	while(iPow < iBit)
	{
		iSet *= 2;
		iPow++;
	}

	return (ulBitMask &iSet) > 0;
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#endif
