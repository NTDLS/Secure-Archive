///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//  Copyright © NetworkDLS 2002, All rights reserved
//
// THIS CODE AND INFORMATION IS PROVIDED "AS IS" WITHOUT WARRANTY OF 
// ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING BUT NOT LIMITED TO 
// THE IMPLIED WARRANTIES OF MERCHANTABILITY AND/OR FITNESS FOR A 
// PARTICULAR PURPOSE.
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#ifndef _NASCCL_HashKey_Cpp_
#define _NASCCL_HashKey_Cpp_
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#include "NASCCL.H"

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void HashKey(const NBYTE *pKey, unsigned int iKeySz, NASCCLKEY *pOutKey)
{
	HashKey((const char *)pKey, iKeySz, pOutKey->Text, pOutKey->Size);
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void HashKey(const void *sRawKey, int iRawKeySz, void *sKeyHash, int iKeyHashSz)
{
	int iRPos = 0;
	int iWPos = 0;
	int iSBox = 0;
	int iSwaps = 0;

	while(iWPos < iKeyHashSz)
	{
		((NBYTE *)sKeyHash)[iWPos] =
			((NBYTE *)sRawKey)[iRPos] + ((NBYTE *)sRawKey)[iRPos] +
			(gsHardSalt[iSBox][((NBYTE *)sRawKey)[iRPos]] + (iRPos + iSBox));

		if(((NBYTE *)sKeyHash)[iWPos] == 0)
		{
			((NBYTE *)sKeyHash)[iWPos] = '-';
		}

		iRPos++;
		iSBox++;

		if(iRPos == iRawKeySz)
		{
			iRPos = 0;
		}

		if(iSBox == NASCCL_SALT_BOXES)
		{
			iSBox = 0;
		}

		iWPos++;
	}
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void HashKey(const char *sRawKey, void *sKeyHash, int iKeyHashSz)
{
	HashKey(sRawKey, (int)strlen(sRawKey), sKeyHash, iKeyHashSz);
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void CipherKey(const void *sRawKey, void *sKeyHash, int iRawKeySz)
{
	HashKey(sRawKey, iRawKeySz, sKeyHash, iRawKeySz);
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#endif
